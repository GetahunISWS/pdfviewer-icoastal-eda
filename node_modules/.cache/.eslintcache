[{"C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX\\src\\index.js":"1","C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX\\src\\reportWebVitals.js":"2","C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX\\src\\App.jsx":"3","C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX\\src\\Utils\\utils.js":"4","C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX - Copy\\src\\index.js":"5","C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX - Copy\\src\\reportWebVitals.js":"6","C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX - Copy\\src\\App.jsx":"7","C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX - Copy\\src\\Utils\\utils.js":"8","C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX - EDA\\src\\index.js":"9","C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX - EDA\\src\\reportWebVitals.js":"10","C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX - EDA\\src\\App.jsx":"11","C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX - EDA\\src\\Utils\\utils.js":"12","C:\\Users\\nnk4\\Projects\\ICoastal\\pdf-viewer-ICoastal - EDA\\src\\index.js":"13","C:\\Users\\nnk4\\Projects\\ICoastal\\pdf-viewer-ICoastal - EDA\\src\\reportWebVitals.js":"14","C:\\Users\\nnk4\\Projects\\ICoastal\\pdf-viewer-ICoastal - EDA\\src\\App.jsx":"15","C:\\Users\\nnk4\\Projects\\ICoastal\\pdf-viewer-ICoastal - EDA\\src\\Utils\\utils.js":"16"},{"size":522,"mtime":1636855397952,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1636750582882,"results":"19","hashOfConfig":"18"},{"size":7250,"mtime":1699577376846,"results":"20","hashOfConfig":"18"},{"size":2154,"mtime":1700081163865,"results":"21","hashOfConfig":"18"},{"size":522,"mtime":1636855397952,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1636750582882,"results":"24","hashOfConfig":"23"},{"size":11329,"mtime":1703687874318,"results":"25","hashOfConfig":"23"},{"size":3304,"mtime":1703637440981,"results":"26","hashOfConfig":"23"},{"size":522,"mtime":1636855397952,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":1636750582882,"results":"29","hashOfConfig":"28"},{"size":7706,"mtime":1704386830446,"results":"30","hashOfConfig":"28"},{"size":3304,"mtime":1703637440981,"results":"31","hashOfConfig":"28"},{"size":522,"mtime":1636855397952,"results":"32","hashOfConfig":"33"},{"size":362,"mtime":1636750582882,"results":"34","hashOfConfig":"33"},{"size":7675,"mtime":1730258585763,"results":"35","hashOfConfig":"33"},{"size":3314,"mtime":1730258538265,"results":"36","hashOfConfig":"33"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ysqv9e",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"r95uv1",{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"24sye1",{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vzi9ef",{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},"C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX\\src\\index.js",[],[],"C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX\\src\\reportWebVitals.js",[],[],"C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX\\src\\App.jsx",["91","92","93"],[],"import { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { Document, Page } from 'react-pdf/dist/esm/entry.webpack';\r\nimport 'react-pdf/dist/esm/Page/AnnotationLayer.css';\r\nimport hcbgImage from \"./CoverPhotoByAtticus.jpg\";\r\nimport logof from \"./ISWSLogo.PNG\";\r\n\r\nimport {\r\n  getParametersNames,\r\n  getWaterParametersNames,\r\n  getWaterParameterCode,\r\n  getParameterCode,\r\n  getStationNames,\r\n} from \"./Utils/utils\";\r\n\r\nconst options = {\r\n  cMapUrl: 'cmaps/',\r\n  cMapPacked: true,\r\n};\r\n\r\nexport default function App() {\r\n  const [stationNames, setStationNames] = useState(null);\r\n  const [waterParameter, setWaterParameter] = useState(null);\r\n\r\n  const [selectedStationName, setSelectedStationName] = useState(\"\");\r\n  const [selectedWaterParameterName, setSelectedWaterParameterName] =\r\n    useState(\"\");\r\n\r\n  const [parameterNames, setParameterNames] = useState(null);\r\n  const [selectedParameterName, setSelectedParameterName] = useState(\"\");\r\n\r\n  const [recordCode, setRecordCode] = useState(0);\r\n  const [waterRecordCode, setWaterRecordCode] = useState(0);\r\n  const [pdfName, setPdfName] = useState(\"\");\r\n  const [waterPdfName, setWaterPdfName] = useState(\"\");\r\n  const [numPages, setNumPages] = useState(null);\r\n  const [pageNumber,setPage] = useState(1);\r\n\r\n  useEffect(() => {\r\n    getParametersNames().then((data) => {\r\n      setParameterNames(data);\r\n    });\r\n  }, []);\r\n  useEffect(() => {\r\n    getWaterParametersNames().then((data) => {\r\n      setWaterParameter(data);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedParameterName && selectedParameterName.length > 0) {\r\n      console.log({ parameterNames });\r\n      getStationNames(selectedParameterName)\r\n        .then((data) => {\r\n          console.log(data);\r\n          setStationNames(data);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  }, [selectedParameterName]);\r\n\r\n  useEffect(() => {\r\n    if (selectedStationName && selectedParameterName) {\r\n      getParameterCode(selectedStationName, selectedParameterName).then(\r\n        ([paramCode, recordCode]) => {\r\n          setRecordCode(recordCode);\r\n          console.log(paramCode, recordCode);\r\n        }\r\n      );\r\n    }\r\n  }, [selectedStationName, selectedParameterName]);\r\n\r\n  useEffect(() => {\r\n    if (selectedWaterParameterName) {\r\n      getWaterParameterCode(selectedWaterParameterName).then((recordCode) => {\r\n        setWaterRecordCode(recordCode);\r\n        console.log(recordCode);\r\n      });\r\n    }\r\n  }, [selectedWaterParameterName]);\r\n\r\n\r\n  useEffect(() => {\r\n    setPdfName(`${recordCode}_EDAplots.pdf`);\r\n  }, [recordCode]);\r\n\r\n  useEffect(() => {\r\n    setWaterPdfName(`${waterRecordCode}_Factsheet.pdf`);\r\n  }, [waterRecordCode]);\r\n\r\n  const handleStationNameSelect = (event) => {\r\n    const { value } = event.target;\r\n    setSelectedStationName(value);\r\n  };\r\n\r\n  const handleParameterNameChange = (event) => {\r\n    const { value } = event.target;\r\n    setSelectedParameterName(value);\r\n    setWaterRecordCode(\"\");\r\n  };\r\n  const handleWaterParameterNameChange = (event) => {\r\n    const { value } = event.target;\r\n    setSelectedWaterParameterName(value);\r\n    setRecordCode(\"\");\r\n    setPage(1);\r\n  };\r\n\r\n  function onDocumentLoadSuccess({ numPages: nextNumPages }) {\r\n    setNumPages(nextNumPages);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\" style={{fontFamily: \"Arial\", textAlign:\"center\", backgroundColor: \"transparent\", backgroundSize:\"cover\"}}>\r\n      <h2 style={{backgroundColor: \"orange\"}}>FoxDB : Selected Water Quality Data Factsheets and EDA Plots</h2>\r\n      <div style={{float:\"left\"}}>\r\n        <img src={logof}/>\r\n      </div>\r\n      <br/><br/><br/>\r\n      <div>\r\n        <h2> Water Quality Data Factsheet </h2>\r\n        {waterParameter && waterParameter !== null ? (\r\n          <Form.Select\r\n            aria-label=\"Parameter Names\"\r\n            onChange={handleWaterParameterNameChange}\r\n            data-live-search=\"true\"\r\n          >\r\n            <option key=\"parameter_default\" selected disabled>\r\n              Water Parameter Name\r\n            </option>\r\n            {waterParameter.map((name, i) => (\r\n              <option value={name} key={i}>\r\n                {name}\r\n              </option>\r\n            ))}\r\n          </Form.Select>\r\n        ) : (\r\n          <></>\r\n        )\r\n        }\r\n      </div>\r\n\r\n   \r\n      <div>\r\n        <h2>EDA plots by Parameter and Monitoring site</h2>\r\n        {parameterNames && parameterNames !== null ? (\r\n          <Form.Select\r\n            aria-label=\"Parameter Names\"\r\n            data-live-search=\"true\"\r\n            onChange={handleParameterNameChange}\r\n          >\r\n            <option key=\"parameter_default\" selected disabled>\r\n              Select Name\r\n            </option>\r\n            {parameterNames.map((name, i) => (\r\n              <option value={name} key={i}>\r\n                {name}\r\n              </option>\r\n            ))}\r\n          </Form.Select>\r\n        ) : (\r\n          <></>\r\n        )}\r\n\r\n        {stationNames && stationNames !== null ? (\r\n          <Form.Select\r\n            aria-label=\"station Name\"\r\n            data-live-search=\"true\"\r\n            onChange={handleStationNameSelect}\r\n          >\r\n            <option key=\"station_default\" selected disabled>\r\n              Select Station\r\n            </option>\r\n            {stationNames.map((name, i) => (\r\n              <option value={name} key={i}>\r\n                {name}\r\n              </option>\r\n            ))}\r\n          </Form.Select>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n      <br/>\r\n      {waterRecordCode !== \"\" && waterRecordCode? (\r\n        <div>\r\n          <button onClick={() => setPage(pageNumber-1)}>PREV</button>\r\n          <p style={{display:\"inline\"}}> {pageNumber} of {numPages} </p>\r\n          <button onClick={() => setPage(pageNumber+1)}>NEXT</button>\r\n          <div style={{display:\"flex\", justifyContent:\"center\"}}>\r\n            <Document\r\n              file={`${process.env.PUBLIC_URL}/results/${waterPdfName}`}\r\n              onLoadSuccess={onDocumentLoadSuccess}\r\n              options={options}\r\n            >\r\n              {\r\n                    <Page\r\n                      scale={100/72} \r\n                      key={`page_${pageNumber}`}\r\n                      pageNumber={pageNumber}\r\n                    />\r\n              }\r\n            </Document>            \r\n          </div>\r\n        </div>\r\n        ) : (\r\n          <></>\r\n        )}     \r\n      {recordCode !== \"\" && recordCode? (\r\n          <div style={{display:\"flex\", justifyContent:\"center\"}}>\r\n            <Document\r\n              file={`${process.env.PUBLIC_URL}/results/${pdfName}`}\r\n              onLoadSuccess={onDocumentLoadSuccess}\r\n              options={options}\r\n            >\r\n              {\r\n                Array.from(\r\n                  new Array(numPages),\r\n                  (el, index) => (\r\n                    <Page\r\n                      scale={100/72}\r\n                      key={`page_${index + 1}`}\r\n                      pageNumber={index + 1}\r\n                    />\r\n                  ),\r\n                )\r\n              }\r\n            </Document>\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n    </div>\r\n  );\r\n}","C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX\\src\\Utils\\utils.js",["94"],[],"import data from '../data/EDAPlots-selectedparameters.json'\r\nimport factdata from '../data/FactSheet-selectedparameters.json'\r\n\r\nexport const getParametersNames = () => {\r\n    return new Promise((res, rej) => {\r\n        const parameterNamesData = data.map(({ParameterNames}) => ParameterNames);\r\n        res([...new Set(parameterNamesData)]);\r\n    });\r\n}\r\nexport const getWaterParametersNames = () => {\r\n    return new Promise((res, rej) => {\r\n        const waterParameterNamesData = factdata.map(({ParameterName}) => ParameterName);\r\n        res([...new Set(waterParameterNamesData)]);\r\n    });\r\n}\r\n\r\nexport const getParameterCode = (stationName, parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let filteredRecords = data.filter((record) => record.StationName === stationName \r\n            && record.ParameterNames === parameterName);\r\n            console.log(filteredRecords)\r\n        if(filteredRecords && filteredRecords.length > 0) {\r\n            const [record, ...records] = filteredRecords;\r\n            res([record.ParameterCode, record.record_code]);\r\n        }\r\n    });\r\n}\r\n\r\nexport const getWaterParameterCode = (waterParameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let filteredRecords = factdata.filter((record) => record.ParameterName === waterParameterName \r\n          );\r\n            console.log(filteredRecords)\r\n            if(filteredRecords && filteredRecords.length > 0) {\r\n                const [record] = filteredRecords;\r\n                res(record.Parameter_Code);\r\n            }\r\n        });\r\n}\r\n\r\nexport const getStationNames = (parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let stationNames = data.filter((record) => record.ParameterNames === parameterName);\r\n        stationNames = stationNames.map(({StationName}) => StationName);\r\n        console.log(stationNames)\r\n        res(stationNames);\r\n    });\r\n}\r\n\r\nexport const getRecordCode = (stationName, parameterCode) => {\r\n    const bracketsRegex = /\\(([^)]+)\\)/;\r\n    const bracketCode = bracketsRegex.exec(stationName)\r\n    console.log(bracketCode[1]);\r\n    return `${bracketCode[1]}00${parameterCode}`;\r\n}\r\n","C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX - Copy\\src\\index.js",[],[],"C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX - Copy\\src\\reportWebVitals.js",[],[],"C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX - Copy\\src\\App.jsx",["95","96","97"],[],"C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX - Copy\\src\\Utils\\utils.js",["98","99"],[],"C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX - EDA\\src\\index.js",[],[],"C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX - EDA\\src\\reportWebVitals.js",[],[],"C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX - EDA\\src\\App.jsx",["100","101","102","103","104","105","106","107","108","109","110"],[],"import { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { Document, Page } from 'react-pdf/dist/esm/entry.webpack';\r\nimport 'react-pdf/dist/esm/Page/AnnotationLayer.css';\r\nimport hcbgImage from \"./CoverPhotoByAtticus.jpg\";\r\nimport logof from \"./ISWSLogo.PNG\";\r\n\r\nimport {\r\n  getParametersNames,\r\n  getWaterParametersNames,\r\n  getWaterParameterCode,\r\n  getParameterCode,\r\n  getStationNames,\r\n  getTrendParametersNames,\r\n  getTrendPeriodNames,\r\n  getTrendParameterCode\r\n} from \"./Utils/utils\";\r\n\r\nconst options = {\r\n  cMapUrl: 'cmaps/',\r\n  cMapPacked: true,\r\n};\r\n\r\nexport default function App() {\r\n  const [stationNames, setStationNames] = useState(null);\r\n  const [waterParameter, setWaterParameter] = useState(null);\r\n\r\n  const [selectedStationName, setSelectedStationName] = useState(\"\");\r\n  const [selectedWaterParameterName, setSelectedWaterParameterName] =\r\n    useState(\"\");\r\n\r\n  const [parameterNames, setParameterNames] = useState(null);\r\n  const [selectedParameterName, setSelectedParameterName] = useState(\"\");\r\n\r\n  const [recordCode, setRecordCode] = useState(0);\r\n  const [waterRecordCode, setWaterRecordCode] = useState(0);\r\n  const [pdfName, setPdfName] = useState(\"\");\r\n  const [waterPdfName, setWaterPdfName] = useState(\"\");\r\n  const [numPages, setNumPages] = useState(null);\r\n  const [pageNumber,setPage] = useState(1);\r\n\r\n  const [periodNames, setPeriodNames] = useState(null);\r\n  const [trendParameter, setTrendParameter] = useState(null);\r\n  const [selectedPeriodName, setSelectedPeriodName] = useState(\"\");\r\n  const [selectedTrendParameterName, setSelectedTrendParameterName] =\r\n    useState(\"\");\r\n  const [trendRecordCode, settrendRecordCode] = useState(0);\r\n  const [trendPdfName, settrendPdfName] = useState(\"\");\r\n\r\n\r\n  useEffect(() => {\r\n      getTrendParametersNames().then((data) => {\r\n          setTrendParameter(data);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n      if (selectedTrendParameterName && selectedTrendParameterName.length > 0) {\r\n          console.log({ trendParameter });\r\n          getTrendPeriodNames(selectedTrendParameterName)\r\n            .then((data) => {\r\n                console.log(data);\r\n                setPeriodNames(data);\r\n            })\r\n            .catch((err) => console.log(err));\r\n      }\r\n  }, [selectedTrendParameterName]);\r\n\r\n  useEffect(() => {\r\n      if (setSelectedPeriodName && selectedTrendParameterName) {\r\n          getTrendParameterCode(selectedPeriodName, selectedTrendParameterName).then(\r\n            ([paramCode, trendRecordCode]) => {\r\n                settrendRecordCode(trendRecordCode);\r\n                console.log(paramCode, trendRecordCode);\r\n            }\r\n          );\r\n      }\r\n  }, [selectedPeriodName, selectedTrendParameterName]);\r\n\r\n  useEffect(() => {\r\n    getParametersNames().then((data) => {\r\n      setParameterNames(data);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getWaterParametersNames().then((data) => {\r\n      setWaterParameter(data);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedParameterName && selectedParameterName.length > 0) {\r\n      console.log({ parameterNames });\r\n      getStationNames(selectedParameterName)\r\n        .then((data) => {\r\n          console.log(data);\r\n          setStationNames(data);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  }, [selectedParameterName]);\r\n\r\n  useEffect(() => {\r\n    if (selectedStationName && selectedParameterName) {\r\n      getParameterCode(selectedStationName, selectedParameterName).then(\r\n        ([paramCode, recordCode]) => {\r\n          setRecordCode(recordCode);\r\n          console.log(paramCode, recordCode);\r\n        }\r\n      );\r\n    }\r\n  }, [selectedStationName, selectedParameterName]);\r\n\r\n  useEffect(() => {\r\n    if (selectedWaterParameterName) {\r\n      getWaterParameterCode(selectedWaterParameterName).then((recordCode) => {\r\n        setWaterRecordCode(recordCode);\r\n        console.log(recordCode);\r\n      });\r\n    }\r\n  }, [selectedWaterParameterName]);\r\n\r\n\r\n  useEffect(() => {\r\n    setPdfName(`${recordCode}_EDAplots.pdf`);\r\n  }, [recordCode]);\r\n\r\n  useEffect(() => {\r\n    setWaterPdfName(`${waterRecordCode}_Factsheet.pdf`);\r\n  }, [waterRecordCode]);\r\n\r\n  useEffect(() => {\r\n      settrendPdfName(`${trendRecordCode}.pdf`);\r\n  }, [trendRecordCode]);\r\n\r\n  const handleStationNameSelect = (event) => {\r\n    const { value } = event.target;\r\n    setSelectedStationName(value);\r\n  };\r\n\r\n  const handlePeriodNameSelect = (event) => {\r\n      const { value } = event.target;\r\n      setSelectedPeriodName(value);\r\n  };\r\n\r\n  const handleParameterNameChange = (event) => {\r\n    const { value } = event.target;\r\n    setSelectedParameterName(value);\r\n    setWaterRecordCode(\"\");\r\n  };\r\n\r\n  const handleTrendParameterNameChange = (event) => {\r\n      const { value } = event.target;\r\n      setSelectedTrendParameterName(value);\r\n      settrendRecordCode(\"\");\r\n  };\r\n\r\n  const handleWaterParameterNameChange = (event) => {\r\n    const { value } = event.target;\r\n    setSelectedWaterParameterName(value);\r\n    setRecordCode(\"\");\r\n    setPage(1);\r\n  };\r\n\r\n  function onDocumentLoadSuccess({ numPages: nextNumPages }) {\r\n    setNumPages(nextNumPages);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\" style={{fontFamily: \"Verdana\", textAlign:\"center\", backgroundImage: 'url('+hcbgImage+')', backgroundColor: \"transparent\", backgroundSize:\"cover\"}}>\r\n      <h2 style={{backgroundColor: \"#FF5F0F\", color: \"white\"}}>Water Quality Trends in the Fox River Watershed - Stratton Dam to Illinois River</h2>\r\n      <div style={{float:\"left\"}}>\r\n        <img src={logof}/>\r\n      </div>\r\n      <br/><br/><br/> <br/>  <br/>\r\n      <div>\r\n        <h3 style={{color: \"#13294b\"}}>EDA Outputs for Water Quality Constituents </h3>\r\n        {parameterNames && parameterNames !== null ? (\r\n          <Form.Select\r\n            aria-label=\"Parameter Names\"\r\n            data-live-search=\"true\"\r\n            onChange={handleParameterNameChange}\r\n          >\r\n            <option key=\"parameter_default\" selected disabled>\r\n              Select Parameter\r\n            </option>\r\n            {parameterNames.map((name, i) => (\r\n              <option value={name} key={i}>\r\n                {name}\r\n              </option>\r\n            ))}\r\n          </Form.Select>\r\n        ) : (\r\n          <></>\r\n        )}\r\n\r\n        {stationNames && stationNames !== null ? (\r\n          <Form.Select\r\n            aria-label=\"station Name\"\r\n            data-live-search=\"true\"\r\n            onChange={handleStationNameSelect}\r\n          >\r\n            <option key=\"station_default\" selected disabled>\r\n              Select Station\r\n            </option>\r\n            {stationNames.map((name, i) => (\r\n              <option value={name} key={i}>\r\n                {name}\r\n              </option>\r\n            ))}\r\n          </Form.Select>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n\r\n\r\n    <br/>\r\n\r\n\r\n        {recordCode !== \"\" && recordCode? (\r\n          <div style={{display:\"flex\", justifyContent:\"center\"}}>\r\n            <Document\r\n              file={`${process.env.PUBLIC_URL}/results/${pdfName}`}\r\n              onLoadSuccess={onDocumentLoadSuccess}\r\n              options={options}\r\n            >\r\n              {\r\n                Array.from(\r\n                  new Array(numPages),\r\n                  (el, index) => (\r\n                    <Page\r\n                      scale={100/72}\r\n                      key={`page_${index + 1}`}\r\n                      pageNumber={index + 1}\r\n                    />\r\n                  ),\r\n                )\r\n              }\r\n            </Document>\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n\r\n    \r\n    </div>\r\n  );\r\n}","C:\\Users\\nnk4\\Projects\\pdf-viewer-FOX - EDA\\src\\Utils\\utils.js",["111","112"],[],"import data from '../data/EDAPlots-selected.json'\r\nimport factdata from '../data/FactSheet-selectedparameters.json'\r\nimport trenddata from '../data/Trendmap-selectedparameters.json'\r\n\r\n\r\nexport const getTrendParametersNames = () => {\r\n    return new Promise((res, rej) => {\r\n        const trendParameterNamesData = trenddata.map(({ParameterName}) => ParameterName);\r\n        res([...new Set(trendParameterNamesData)]);\r\n    });\r\n}\r\n\r\nexport const getTrendPeriodNames = (parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let periodNames = trenddata.filter((record) => record.ParameterName === parameterName);\r\n        periodNames = periodNames.map(({Period}) => Period);\r\n        console.log(periodNames)\r\n        res(periodNames);\r\n    });\r\n}\r\n\r\nexport const getTrendParameterCode = (periodName, parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let filteredRecords = trenddata.filter((record) => record.Period === periodName \r\n            && record.ParameterName === parameterName);\r\n        console.log(filteredRecords)\r\n        if(filteredRecords && filteredRecords.length > 0) {\r\n            const [record, ...records] = filteredRecords;\r\n            res([record.Parameter_Code, record.trend_record_code]);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport const getParametersNames = () => {\r\n    return new Promise((res, rej) => {\r\n        const parameterNamesData = data.map(({ParameterNames}) => ParameterNames);\r\n        res([...new Set(parameterNamesData)]);\r\n    });\r\n}\r\n\r\nexport const getWaterParametersNames = () => {\r\n    return new Promise((res, rej) => {\r\n        const waterParameterNamesData = factdata.map(({ParameterName}) => ParameterName);\r\n        res([...new Set(waterParameterNamesData)]);\r\n    });\r\n}\r\n\r\nexport const getParameterCode = (stationName, parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let filteredRecords = data.filter((record) => record.StationName === stationName \r\n            && record.ParameterNames === parameterName);\r\n            console.log(filteredRecords)\r\n        if(filteredRecords && filteredRecords.length > 0) {\r\n            const [record, ...records] = filteredRecords;\r\n            res([record.ParameterCode, record.record_code]);\r\n        }\r\n    });\r\n}\r\n\r\nexport const getWaterParameterCode = (waterParameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let filteredRecords = factdata.filter((record) => record.ParameterName === waterParameterName \r\n          );\r\n            console.log(filteredRecords)\r\n            if(filteredRecords && filteredRecords.length > 0) {\r\n                const [record] = filteredRecords;\r\n                res(record.Parameter_Code);\r\n            }\r\n        });\r\n}\r\n\r\nexport const getStationNames = (parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let stationNames = data.filter((record) => record.ParameterNames === parameterName);\r\n        stationNames = stationNames.map(({StationName}) => StationName);\r\n        console.log(stationNames)\r\n        res(stationNames);\r\n    });\r\n}\r\n\r\nexport const getRecordCode = (stationName, parameterCode) => {\r\n    const bracketsRegex = /\\(([^)]+)\\)/;\r\n    const bracketCode = bracketsRegex.exec(stationName)\r\n    console.log(bracketCode[1]);\r\n    return `${bracketCode[1]}00${parameterCode}`;\r\n}\r\n","C:\\Users\\nnk4\\Projects\\ICoastal\\pdf-viewer-ICoastal - EDA\\src\\index.js",[],[],"C:\\Users\\nnk4\\Projects\\ICoastal\\pdf-viewer-ICoastal - EDA\\src\\reportWebVitals.js",[],[],"C:\\Users\\nnk4\\Projects\\ICoastal\\pdf-viewer-ICoastal - EDA\\src\\App.jsx",["113","114","115","116","117","118","119","120","121","122","123"],[],"import { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { Document, Page } from 'react-pdf/dist/esm/entry.webpack';\r\nimport 'react-pdf/dist/esm/Page/AnnotationLayer.css';\r\nimport hcbgImage from \"./CoverPhotoByAtticus.jpg\";\r\nimport logof from \"./ISWSLogo.PNG\";\r\n\r\nimport {\r\n  getParametersNames,\r\n  getWaterParametersNames,\r\n  getWaterParameterCode,\r\n  getParameterCode,\r\n  getStationNames,\r\n  getTrendParametersNames,\r\n  getTrendPeriodNames,\r\n  getTrendParameterCode\r\n} from \"./Utils/utils\";\r\n\r\nconst options = {\r\n  cMapUrl: 'cmaps/',\r\n  cMapPacked: true,\r\n};\r\n\r\nexport default function App() {\r\n  const [stationNames, setStationNames] = useState(null);\r\n  const [waterParameter, setWaterParameter] = useState(null);\r\n\r\n  const [selectedStationName, setSelectedStationName] = useState(\"\");\r\n  const [selectedWaterParameterName, setSelectedWaterParameterName] =\r\n    useState(\"\");\r\n\r\n  const [parameterNames, setParameterNames] = useState(null);\r\n  const [selectedParameterName, setSelectedParameterName] = useState(\"\");\r\n\r\n  const [recordCode, setRecordCode] = useState(0);\r\n  const [waterRecordCode, setWaterRecordCode] = useState(0);\r\n  const [pdfName, setPdfName] = useState(\"\");\r\n  const [waterPdfName, setWaterPdfName] = useState(\"\");\r\n  const [numPages, setNumPages] = useState(null);\r\n  const [pageNumber,setPage] = useState(1);\r\n\r\n  const [periodNames, setPeriodNames] = useState(null);\r\n  const [trendParameter, setTrendParameter] = useState(null);\r\n  const [selectedPeriodName, setSelectedPeriodName] = useState(\"\");\r\n  const [selectedTrendParameterName, setSelectedTrendParameterName] =\r\n    useState(\"\");\r\n  const [trendRecordCode, settrendRecordCode] = useState(0);\r\n  const [trendPdfName, settrendPdfName] = useState(\"\");\r\n\r\n\r\n  useEffect(() => {\r\n      getTrendParametersNames().then((data) => {\r\n          setTrendParameter(data);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n      if (selectedTrendParameterName && selectedTrendParameterName.length > 0) {\r\n          console.log({ trendParameter });\r\n          getTrendPeriodNames(selectedTrendParameterName)\r\n            .then((data) => {\r\n                console.log(data);\r\n                setPeriodNames(data);\r\n            })\r\n            .catch((err) => console.log(err));\r\n      }\r\n  }, [selectedTrendParameterName]);\r\n\r\n  useEffect(() => {\r\n      if (setSelectedPeriodName && selectedTrendParameterName) {\r\n          getTrendParameterCode(selectedPeriodName, selectedTrendParameterName).then(\r\n            ([paramCode, trendRecordCode]) => {\r\n                settrendRecordCode(trendRecordCode);\r\n                console.log(paramCode, trendRecordCode);\r\n            }\r\n          );\r\n      }\r\n  }, [selectedPeriodName, selectedTrendParameterName]);\r\n\r\n  useEffect(() => {\r\n    getParametersNames().then((data) => {\r\n      setParameterNames(data);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getWaterParametersNames().then((data) => {\r\n      setWaterParameter(data);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedParameterName && selectedParameterName.length > 0) {\r\n      console.log({ parameterNames });\r\n      getStationNames(selectedParameterName)\r\n        .then((data) => {\r\n          console.log(data);\r\n          setStationNames(data);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  }, [selectedParameterName]);\r\n\r\n  useEffect(() => {\r\n    if (selectedStationName && selectedParameterName) {\r\n      getParameterCode(selectedStationName, selectedParameterName).then(\r\n        ([paramCode, recordCode]) => {\r\n          setRecordCode(recordCode);\r\n          console.log(paramCode, recordCode);\r\n        }\r\n      );\r\n    }\r\n  }, [selectedStationName, selectedParameterName]);\r\n\r\n  useEffect(() => {\r\n    if (selectedWaterParameterName) {\r\n      getWaterParameterCode(selectedWaterParameterName).then((recordCode) => {\r\n        setWaterRecordCode(recordCode);\r\n        console.log(recordCode);\r\n      });\r\n    }\r\n  }, [selectedWaterParameterName]);\r\n\r\n\r\n  useEffect(() => {\r\n    setPdfName(`${recordCode}_EDAplots.pdf`);\r\n  }, [recordCode]);\r\n\r\n  useEffect(() => {\r\n    setWaterPdfName(`${waterRecordCode}_Factsheet.pdf`);\r\n  }, [waterRecordCode]);\r\n\r\n  useEffect(() => {\r\n      settrendPdfName(`${trendRecordCode}.pdf`);\r\n  }, [trendRecordCode]);\r\n\r\n  const handleStationNameSelect = (event) => {\r\n    const { value } = event.target;\r\n    setSelectedStationName(value);\r\n  };\r\n\r\n  const handlePeriodNameSelect = (event) => {\r\n      const { value } = event.target;\r\n      setSelectedPeriodName(value);\r\n  };\r\n\r\n  const handleParameterNameChange = (event) => {\r\n    const { value } = event.target;\r\n    setSelectedParameterName(value);\r\n    setWaterRecordCode(\"\");\r\n  };\r\n\r\n  const handleTrendParameterNameChange = (event) => {\r\n      const { value } = event.target;\r\n      setSelectedTrendParameterName(value);\r\n      settrendRecordCode(\"\");\r\n  };\r\n\r\n  const handleWaterParameterNameChange = (event) => {\r\n    const { value } = event.target;\r\n    setSelectedWaterParameterName(value);\r\n    setRecordCode(\"\");\r\n    setPage(1);\r\n  };\r\n\r\n  function onDocumentLoadSuccess({ numPages: nextNumPages }) {\r\n    setNumPages(nextNumPages);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\" style={{fontFamily: \"Verdana\", textAlign:\"center\", backgroundImage: 'url('+hcbgImage+')', backgroundColor: \"transparent\", backgroundSize:\"cover\"}}>\r\n      <h2 style={{backgroundColor: \"#FF5F0F\", color: \"white\"}}>Water Quality Trends in the Illinois Coastal Zone</h2>\r\n      <div style={{float:\"left\"}}>\r\n        <img src={logof}/>\r\n      </div>\r\n      <br/><br/><br/> <br/>  <br/>\r\n      <div>\r\n        <h3 style={{color: \"#13294b\"}}>EDA Outputs for Water Quality Constituents </h3>\r\n        {parameterNames && parameterNames !== null ? (\r\n          <Form.Select\r\n            aria-label=\"Parameter Names\"\r\n            data-live-search=\"true\"\r\n            onChange={handleParameterNameChange}\r\n          >\r\n            <option key=\"parameter_default\" selected disabled>\r\n              Select Parameter\r\n            </option>\r\n            {parameterNames.map((name, i) => (\r\n              <option value={name} key={i}>\r\n                {name}\r\n              </option>\r\n            ))}\r\n          </Form.Select>\r\n        ) : (\r\n          <></>\r\n        )}\r\n\r\n        {stationNames && stationNames !== null ? (\r\n          <Form.Select\r\n            aria-label=\"station Name\"\r\n            data-live-search=\"true\"\r\n            onChange={handleStationNameSelect}\r\n          >\r\n            <option key=\"station_default\" selected disabled>\r\n              Select Station\r\n            </option>\r\n            {stationNames.map((name, i) => (\r\n              <option value={name} key={i}>\r\n                {name}\r\n              </option>\r\n            ))}\r\n          </Form.Select>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n\r\n\r\n    <br/>\r\n\r\n\r\n        {recordCode !== \"\" && recordCode? (\r\n          <div style={{display:\"flex\", justifyContent:\"center\"}}>\r\n            <Document\r\n              file={`${process.env.PUBLIC_URL}/results/${pdfName}`}\r\n              onLoadSuccess={onDocumentLoadSuccess}\r\n              options={options}\r\n            >\r\n              {\r\n                Array.from(\r\n                  new Array(numPages),\r\n                  (el, index) => (\r\n                    <Page\r\n                      scale={100/72}\r\n                      key={`page_${index + 1}`}\r\n                      pageNumber={index + 1}\r\n                    />\r\n                  ),\r\n                )\r\n              }\r\n            </Document>\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n\r\n    \r\n    </div>\r\n  );\r\n}","C:\\Users\\nnk4\\Projects\\ICoastal\\pdf-viewer-ICoastal - EDA\\src\\Utils\\utils.js",["124","125"],[],"import data from '../data/EDAPlots-selectedparameters.json'\r\nimport factdata from '../data/FactSheet-selectedparameters.json'\r\nimport trenddata from '../data/Trendmap-selectedparameters.json'\r\n\r\n\r\nexport const getTrendParametersNames = () => {\r\n    return new Promise((res, rej) => {\r\n        const trendParameterNamesData = trenddata.map(({ParameterName}) => ParameterName);\r\n        res([...new Set(trendParameterNamesData)]);\r\n    });\r\n}\r\n\r\nexport const getTrendPeriodNames = (parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let periodNames = trenddata.filter((record) => record.ParameterName === parameterName);\r\n        periodNames = periodNames.map(({Period}) => Period);\r\n        console.log(periodNames)\r\n        res(periodNames);\r\n    });\r\n}\r\n\r\nexport const getTrendParameterCode = (periodName, parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let filteredRecords = trenddata.filter((record) => record.Period === periodName \r\n            && record.ParameterName === parameterName);\r\n        console.log(filteredRecords)\r\n        if(filteredRecords && filteredRecords.length > 0) {\r\n            const [record, ...records] = filteredRecords;\r\n            res([record.Parameter_Code, record.trend_record_code]);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport const getParametersNames = () => {\r\n    return new Promise((res, rej) => {\r\n        const parameterNamesData = data.map(({ParameterNames}) => ParameterNames);\r\n        res([...new Set(parameterNamesData)]);\r\n    });\r\n}\r\n\r\nexport const getWaterParametersNames = () => {\r\n    return new Promise((res, rej) => {\r\n        const waterParameterNamesData = factdata.map(({ParameterName}) => ParameterName);\r\n        res([...new Set(waterParameterNamesData)]);\r\n    });\r\n}\r\n\r\nexport const getParameterCode = (stationName, parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let filteredRecords = data.filter((record) => record.StationName === stationName \r\n            && record.ParameterNames === parameterName);\r\n            console.log(filteredRecords)\r\n        if(filteredRecords && filteredRecords.length > 0) {\r\n            const [record, ...records] = filteredRecords;\r\n            res([record.ParameterCode, record.record_code]);\r\n        }\r\n    });\r\n}\r\n\r\nexport const getWaterParameterCode = (waterParameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let filteredRecords = factdata.filter((record) => record.ParameterName === waterParameterName \r\n          );\r\n            console.log(filteredRecords)\r\n            if(filteredRecords && filteredRecords.length > 0) {\r\n                const [record] = filteredRecords;\r\n                res(record.Parameter_Code);\r\n            }\r\n        });\r\n}\r\n\r\nexport const getStationNames = (parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let stationNames = data.filter((record) => record.ParameterNames === parameterName);\r\n        stationNames = stationNames.map(({StationName}) => StationName);\r\n        console.log(stationNames)\r\n        res(stationNames);\r\n    });\r\n}\r\n\r\nexport const getRecordCode = (stationName, parameterCode) => {\r\n    const bracketsRegex = /\\(([^)]+)\\)/;\r\n    const bracketCode = bracketsRegex.exec(stationName)\r\n    console.log(bracketCode[1]);\r\n    return `${bracketCode[1]}00${parameterCode}`;\r\n}\r\n",{"ruleId":"126","severity":1,"message":"127","line":6,"column":8,"nodeType":"128","messageId":"129","endLine":6,"endColumn":17},{"ruleId":"130","severity":1,"message":"131","line":61,"column":6,"nodeType":"132","endLine":61,"endColumn":29,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":117,"column":9,"nodeType":"136","endLine":117,"endColumn":27},{"ruleId":"126","severity":1,"message":"137","line":23,"column":31,"nodeType":"128","messageId":"129","endLine":23,"endColumn":38},{"ruleId":"130","severity":1,"message":"138","line":68,"column":6,"nodeType":"132","endLine":68,"endColumn":34,"suggestions":"139"},{"ruleId":"130","severity":1,"message":"131","line":103,"column":6,"nodeType":"132","endLine":103,"endColumn":29,"suggestions":"140"},{"ruleId":"134","severity":1,"message":"135","line":175,"column":9,"nodeType":"136","endLine":175,"endColumn":27},{"ruleId":"126","severity":1,"message":"137","line":28,"column":31,"nodeType":"128","messageId":"129","endLine":28,"endColumn":38},{"ruleId":"126","severity":1,"message":"137","line":55,"column":31,"nodeType":"128","messageId":"129","endLine":55,"endColumn":38},{"ruleId":"126","severity":1,"message":"141","line":27,"column":10,"nodeType":"128","messageId":"129","endLine":27,"endColumn":24},{"ruleId":"126","severity":1,"message":"142","line":39,"column":10,"nodeType":"128","messageId":"129","endLine":39,"endColumn":22},{"ruleId":"126","severity":1,"message":"143","line":41,"column":10,"nodeType":"128","messageId":"129","endLine":41,"endColumn":20},{"ruleId":"126","severity":1,"message":"144","line":43,"column":10,"nodeType":"128","messageId":"129","endLine":43,"endColumn":21},{"ruleId":"126","severity":1,"message":"145","line":49,"column":10,"nodeType":"128","messageId":"129","endLine":49,"endColumn":22},{"ruleId":"130","severity":1,"message":"138","line":68,"column":6,"nodeType":"132","endLine":68,"endColumn":34,"suggestions":"146"},{"ruleId":"130","severity":1,"message":"131","line":103,"column":6,"nodeType":"132","endLine":103,"endColumn":29,"suggestions":"147"},{"ruleId":"126","severity":1,"message":"148","line":143,"column":9,"nodeType":"128","messageId":"129","endLine":143,"endColumn":31},{"ruleId":"126","severity":1,"message":"149","line":154,"column":9,"nodeType":"128","messageId":"129","endLine":154,"endColumn":39},{"ruleId":"126","severity":1,"message":"150","line":160,"column":9,"nodeType":"128","messageId":"129","endLine":160,"endColumn":39},{"ruleId":"134","severity":1,"message":"135","line":175,"column":9,"nodeType":"136","endLine":175,"endColumn":27},{"ruleId":"126","severity":1,"message":"137","line":28,"column":31,"nodeType":"128","messageId":"129","endLine":28,"endColumn":38},{"ruleId":"126","severity":1,"message":"137","line":55,"column":31,"nodeType":"128","messageId":"129","endLine":55,"endColumn":38},{"ruleId":"126","severity":1,"message":"141","line":27,"column":10,"nodeType":"128","messageId":"129","endLine":27,"endColumn":24},{"ruleId":"126","severity":1,"message":"142","line":39,"column":10,"nodeType":"128","messageId":"129","endLine":39,"endColumn":22},{"ruleId":"126","severity":1,"message":"143","line":41,"column":10,"nodeType":"128","messageId":"129","endLine":41,"endColumn":20},{"ruleId":"126","severity":1,"message":"144","line":43,"column":10,"nodeType":"128","messageId":"129","endLine":43,"endColumn":21},{"ruleId":"126","severity":1,"message":"145","line":49,"column":10,"nodeType":"128","messageId":"129","endLine":49,"endColumn":22},{"ruleId":"130","severity":1,"message":"138","line":68,"column":6,"nodeType":"132","endLine":68,"endColumn":34,"suggestions":"151"},{"ruleId":"130","severity":1,"message":"131","line":103,"column":6,"nodeType":"132","endLine":103,"endColumn":29,"suggestions":"152"},{"ruleId":"126","severity":1,"message":"148","line":143,"column":9,"nodeType":"128","messageId":"129","endLine":143,"endColumn":31},{"ruleId":"126","severity":1,"message":"149","line":154,"column":9,"nodeType":"128","messageId":"129","endLine":154,"endColumn":39},{"ruleId":"126","severity":1,"message":"150","line":160,"column":9,"nodeType":"128","messageId":"129","endLine":160,"endColumn":39},{"ruleId":"134","severity":1,"message":"135","line":175,"column":9,"nodeType":"136","endLine":175,"endColumn":27},{"ruleId":"126","severity":1,"message":"137","line":28,"column":31,"nodeType":"128","messageId":"129","endLine":28,"endColumn":38},{"ruleId":"126","severity":1,"message":"137","line":55,"column":31,"nodeType":"128","messageId":"129","endLine":55,"endColumn":38},"no-unused-vars","'hcbgImage' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'parameterNames'. Either include it or remove the dependency array.","ArrayExpression",["153"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'records' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'trendParameter'. Either include it or remove the dependency array.",["154"],["155"],"'waterParameter' is assigned a value but never used.","'waterPdfName' is assigned a value but never used.","'pageNumber' is assigned a value but never used.","'periodNames' is assigned a value but never used.","'trendPdfName' is assigned a value but never used.",["156"],["157"],"'handlePeriodNameSelect' is assigned a value but never used.","'handleTrendParameterNameChange' is assigned a value but never used.","'handleWaterParameterNameChange' is assigned a value but never used.",["158"],["159"],{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"160","fix":"164"},{"desc":"162","fix":"165"},{"desc":"160","fix":"166"},{"desc":"162","fix":"167"},{"desc":"160","fix":"168"},"Update the dependencies array to be: [parameterNames, selectedParameterName]",{"range":"169","text":"170"},"Update the dependencies array to be: [selectedTrendParameterName, trendParameter]",{"range":"171","text":"172"},{"range":"173","text":"170"},{"range":"174","text":"172"},{"range":"175","text":"170"},{"range":"176","text":"172"},{"range":"177","text":"170"},[1896,1919],"[parameterNames, selectedParameterName]",[2321,2349],"[selectedTrendParameterName, trendParameter]",[3364,3387],[2321,2349],[3364,3387],[2321,2349],[3364,3387]]